#define LOG_TAG "libtpms_jni"

/* DO NOT EDIT THIS FILE - it is machine generated */
#include <android_runtime/AndroidRuntime.h>
#include <utils/Log.h>
#include "com_apical_tpms_tpms.h"
#include "tpms.h"
/* Header for class com_apical_tpms_tpms */

#define DO_USE_VAR(var) do { var = var; } while (0)

JavaVM* g_jvm = NULL;
JNIEXPORT jint JNICALL JNI_OnLoad(JavaVM* vm, void* reserved)
{
    DO_USE_VAR(reserved);

    JNIEnv* env = NULL;

    if (vm->GetEnv((void**) &env, JNI_VERSION_1_4) != JNI_OK) {
        ALOGE("ERROR: GetEnv failed\n");
        return -1;
    }
    assert(env != NULL);

    // for g_jvm
    g_jvm = vm;

    return JNI_VERSION_1_4;
}

JNIEXPORT JNIEnv* get_jni_env(void)
{
    JNIEnv *env;
    int status;
    if (NULL == g_jvm)
    {
        ALOGE("g_jvm == NULL !\n");
        return NULL;
    }
    status = g_jvm->GetEnv((void **)&env, JNI_VERSION_1_4);
    if (status < 0) {
//      ALOGD("failed to get JNI environment assuming native thread !\n");
        status = g_jvm->AttachCurrentThread(&env, NULL);
        if (status < 0) {
            ALOGE("failed to attach current thread !\n");
            return NULL;
        }
    }
    return env;
}

extern "C" void tpms_callback_func(void *ctxt, int type, int i)
{
    DO_USE_VAR(ctxt);
    JNIEnv *env = get_jni_env();
    ALOGD("tpms_callback_func type: %d, i: %d\n", type, i);
}

/*
 * Class:     com_apical_tpms_tpms
 * Method:    nativeInit
 * Signature: (Ljava/lang/String;)J
 */
JNIEXPORT jlong JNICALL Java_com_apical_tpms_tpms_nativeInit
  (JNIEnv *env, jclass clazz, jstring dev)
{
    DO_USE_VAR(env);
    DO_USE_VAR(clazz);
    const char *str = env->GetStringUTFChars(dev, NULL);
    jlong ctxt = (jlong)tpms_init((char*)str, tpms_callback_func);
    env->ReleaseStringUTFChars(dev, str);
    return ctxt;
}

/*
 * Class:     com_apical_tpms_tpms
 * Method:    nativeFree
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_com_apical_tpms_tpms_nativeFree
  (JNIEnv *env, jclass clazz, jlong ctxt)
{
    DO_USE_VAR(env);
    DO_USE_VAR(clazz);
    tpms_free((void*)ctxt);
}

/*
 * Class:     com_apical_tpms_tpms
 * Method:    nativeHandShake
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_com_apical_tpms_tpms_nativeHandShake
  (JNIEnv *env, jclass clazz, jlong ctxt)
{
    DO_USE_VAR(env);
    DO_USE_VAR(clazz);
    return tpms_handshake((void*)ctxt);
}

/*
 * Class:     com_apical_tpms_tpms
 * Method:    nativeConfigAlert
 * Signature: (JIII)I
 */
JNIEXPORT jint JNICALL Java_com_apical_tpms_tpms_nativeConfigAlert__JIII
  (JNIEnv *env, jclass clazz, jlong ctxt, jint i, jint hot, jint low)
{
    DO_USE_VAR(env);
    DO_USE_VAR(clazz);
    TPMS_ALERT alert = { hot, low };
    return tpms_config_alert((void*)ctxt, i, &alert);
}

/*
 * Class:     com_apical_tpms_tpms
 * Method:    nativeConfigAlert
 * Signature: (J[I)I
 */
JNIEXPORT jint JNICALL Java_com_apical_tpms_tpms_nativeConfigAlert__J_3I
  (JNIEnv *env, jclass clazz, jlong ctxt, jintArray alerts)
{
    DO_USE_VAR(clazz);
    TPMS_ALERT tas[MAX_ALERT_NUM];
    jint *psrc = env->GetIntArrayElements(alerts, 0);
    jsize slen = env->GetArrayLength(alerts) * sizeof(jint);
    jsize dlen = sizeof(tas);
    memset(tas, 0, sizeof(tas));
    memcpy(tas, psrc, dlen < slen ? dlen : slen);
    jint ret = tpms_config_alert((void*)ctxt, 0, tas);
    env->ReleaseIntArrayElements(alerts, psrc, 0);
    return ret;
}

/*
 * Class:     com_apical_tpms_tpms
 * Method:    nativeRequestAlert
 * Signature: (JI)I
 */
JNIEXPORT jint JNICALL Java_com_apical_tpms_tpms_nativeRequestAlert
  (JNIEnv *env, jclass clazz, jlong ctxt, jint i)
{
    DO_USE_VAR(env);
    DO_USE_VAR(clazz);
    return tpms_request_alert((void*)ctxt, i);
}

/*
 * Class:     com_apical_tpms_tpms
 * Method:    nativeRequestTire
 * Signature: (JI)I
 */
JNIEXPORT jint JNICALL Java_com_apical_tpms_tpms_nativeRequestTire
  (JNIEnv *env, jclass clazz, jlong ctxt, jint i)
{
    DO_USE_VAR(env);
    DO_USE_VAR(clazz);
    return tpms_request_tire((void*)ctxt, i);
}

/*
 * Class:     com_apical_tpms_tpms
 * Method:    nativeUnwatchTire
 * Signature: (JI)I
 */
JNIEXPORT jint JNICALL Java_com_apical_tpms_tpms_nativeUnwatchTire
  (JNIEnv *env, jclass clazz, jlong ctxt, jint i)
{
    DO_USE_VAR(env);
    DO_USE_VAR(clazz);
    return tpms_unwatch_tire((void*)ctxt, i);
}

/*
 * Class:     com_apical_tpms_tpms
 * Method:    nativeLearnTire
 * Signature: (JI)I
 */
JNIEXPORT jint JNICALL Java_com_apical_tpms_tpms_nativeLearnTire
  (JNIEnv *env, jclass clazz, jlong ctxt, jint i)
{
    DO_USE_VAR(env);
    DO_USE_VAR(clazz);
    return tpms_learn_tire((void*)ctxt, i);
}

/*
 * Class:     com_apical_tpms_tpms
 * Method:    nativeGetParams
 * Signature: (JI[I)I
 */
JNIEXPORT jint JNICALL Java_com_apical_tpms_tpms_nativeGetParams
  (JNIEnv *env, jclass clazz, jlong ctxt, jint type, jintArray array)
{
    DO_USE_VAR(clazz);
    jint *psrc = (jint*)tpms_get_params((void*)ctxt, type);
    jsize slen = 0;
    jint *pdst = env->GetIntArrayElements(array, 0);
    jsize dlen = env->GetArrayLength(array) * sizeof(jint);
    switch (type) {
    case TPMS_TYPE_TIRES: slen = sizeof(TPMS_TIRE ) * MAX_TIRES_NUM; break;
    case TPMS_TYPE_ALERT: slen = sizeof(TPMS_ALERT) * MAX_ALERT_NUM; break;
    }
    memcpy(pdst, psrc, dlen < slen ? dlen : slen);
    env->ReleaseIntArrayElements(array, pdst, 0);
    return 0;
}

